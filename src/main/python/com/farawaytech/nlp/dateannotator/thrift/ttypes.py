#
# Autogenerated by Thrift Compiler (0.9.2)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py:new_style,utf8strings
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException

from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None



class TTimeAnnotation(object):
  """
  Attributes:
   - startToken
   - endToken
   - temporal
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'startToken', None, None, ), # 1
    (2, TType.STRING, 'endToken', None, None, ), # 2
    (3, TType.STRING, 'temporal', None, None, ), # 3
  )

  def __init__(self, startToken=None, endToken=None, temporal=None,):
    self.startToken = startToken
    self.endToken = endToken
    self.temporal = temporal

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.startToken = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.endToken = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.temporal = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('TTimeAnnotation')
    if self.startToken is not None:
      oprot.writeFieldBegin('startToken', TType.STRING, 1)
      oprot.writeString(self.startToken.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.endToken is not None:
      oprot.writeFieldBegin('endToken', TType.STRING, 2)
      oprot.writeString(self.endToken.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.temporal is not None:
      oprot.writeFieldBegin('temporal', TType.STRING, 3)
      oprot.writeString(self.temporal.encode('utf-8'))
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.startToken is None:
      raise TProtocol.TProtocolException(message='Required field startToken is unset!')
    if self.endToken is None:
      raise TProtocol.TProtocolException(message='Required field endToken is unset!')
    if self.temporal is None:
      raise TProtocol.TProtocolException(message='Required field temporal is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.startToken)
    value = (value * 31) ^ hash(self.endToken)
    value = (value * 31) ^ hash(self.temporal)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class TAnnotationResponse(object):
  """
  Attributes:
   - annotations
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'annotations', (TType.STRUCT,(TTimeAnnotation, TTimeAnnotation.thrift_spec)), None, ), # 1
  )

  def __init__(self, annotations=None,):
    self.annotations = annotations

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.annotations = []
          (_etype3, _size0) = iprot.readListBegin()
          for _i4 in xrange(_size0):
            _elem5 = TTimeAnnotation()
            _elem5.read(iprot)
            self.annotations.append(_elem5)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('TAnnotationResponse')
    if self.annotations is not None:
      oprot.writeFieldBegin('annotations', TType.LIST, 1)
      oprot.writeListBegin(TType.STRUCT, len(self.annotations))
      for iter6 in self.annotations:
        iter6.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.annotations is None:
      raise TProtocol.TProtocolException(message='Required field annotations is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.annotations)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
